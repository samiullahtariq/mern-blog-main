import bcryptjs from"bcryptjs";import{errorHandler}from"../utils/error.js";import User from"../models/user.model.js";export const test=(e,r)=>{r.json({message:"API is working!"})};export const updateUser=async(e,r,s)=>{if(e.user.id!==e.params.userId)return s(errorHandler(403,"You are not allowed to update this user"));if(e.body.password){if(e.body.password.length<6)return s(errorHandler(400,"Password must be at least 6 characters"));e.body.password=bcryptjs.hashSync(e.body.password,10)}if(e.body.username){if(e.body.username.length<7||e.body.username.length>20)return s(errorHandler(400,"Username must be between 7 and 20 characters"));if(e.body.username.includes(" "))return s(errorHandler(400,"Username cannot contain spaces"));if(e.body.username!==e.body.username.toLowerCase())return s(errorHandler(400,"Username must be lowercase"));if(!e.body.username.match(/^[a-zA-Z0-9]+$/))return s(errorHandler(400,"Username can only contain letters and numbers"))}try{const t=await User.findByIdAndUpdate(e.params.userId,{$set:{username:e.body.username,email:e.body.email,profilePicture:e.body.profilePicture,password:e.body.password}},{new:!0}),{password:a,...o}=t._doc;r.status(200).json(o)}catch(e){s(e)}};export const deleteUser=async(e,r,s)=>{if(!e.user.isAdmin&&e.user.id!==e.params.userId)return s(errorHandler(403,"You are not allowed to delete this user"));try{await User.findByIdAndDelete(e.params.userId),r.status(200).json("User has been deleted")}catch(e){s(e)}};export const signout=(e,r,s)=>{try{r.clearCookie("access_token").status(200).json("User has been signed out")}catch(e){s(e)}};export const getUsers=async(e,r,s)=>{if(!e.user.isAdmin)return s(errorHandler(403,"You are not allowed to see all users"));try{const t=parseInt(e.query.startIndex)||0,a=parseInt(e.query.limit)||9,o="asc"===e.query.sort?1:-1,n=await User.find().sort({createdAt:o}).skip(t).limit(a),d=n.map(e=>{const{password:r,...s}=e._doc;return s}),u=await User.countDocuments(),c=new Date,i=new Date(c.getFullYear(),c.getMonth()-1,c.getDate()),l=await User.countDocuments({createdAt:{$gte:i}});r.status(200).json({users:d,totalUsers:u,lastMonthUsers:l})}catch(e){s(e)}};export const getUser=async(e,r,s)=>{try{const t=await User.findById(e.params.userId);if(!t)return s(errorHandler(404,"User not found"));const{password:a,...o}=t._doc;r.status(200).json(o)}catch(e){s(e)}};